<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_exeg2_acs.ACSDeployment</api_name>
        <client_callable>false</client_callable>
        <description>A class to hold all information and functions that have to do with an Exegy release in reference to Automatic Change Scheduling. Will handle creating CRs and making sure they are scheduled.</description>
        <name>ACSDeployment</name>
        <script><![CDATA[var ACSDeployment = Class.create();
ACSDeployment.prototype = {
    type: 'ACSDeployment',
    /**
     * Constructor, sets up the member variables.
     */
    initialize: function() {
        this.id                    = null;
        this.name                  = null;
        this.version               = null;
        this.firmware_version      = null;
        this.category              = null;
        this.target_appliances     = null;
        this.deadline              = null;
        this.start_date            = null;
        this.release_type          = null;
        this.artifact_type         = null;
        this.hot_cut               = false;
        this.unique_key            = null;
        this.all_appliances        = null;
        this.applicable_appliances = null;
        this.feedhandler_instances = [];
        this.init_lib_instances    = [];
        this.deployment_items      = [];

        this.scheduling_config     = null;

        this.debug = '';

        this.logger = new ACSLogger();
        this.logger.set_source('ACSDeployment');

        this.deployment_category_to_template_id = {
            'Feed Handler': '4cca50014f91aa008ea450ee0310c71c',
            'Firmware': '1655cbfc138e2640e93cb16f3244b0aa'
        };
    },


    /**
     * Given an appliance record from SNOW determine if the appliance has the
     * version of firmware installed on it that is targeted by this deployment
     * @param {object} appliance - The appliance for which to check the
     *                             firmware version
     */
    does_appliance_have_correct_firmware: function(appliance)
    {
        var correct = false;
        var f_version_major_minor = appliance.firmware_version.split('.');
        if(f_version_major_minor.length == 3)
        {
            f_version_major_minor = f_version_major_minor[0] +'.'+ f_version_major_minor[1];

            if(this.firmware_version == f_version_major_minor)
            {
                correct = true;
            }
        }

        return correct;
    },


    /**
     * Takes in two versions and returns a value to denote whether one is
     * higher than the other.
     * @param {string} a - A version number
     * @param {string} b - Another version number
     * @return {integer} 0 if the versions are equal, 1 if version a is higher
     *                   than version b, 2 if version b is higher than version
     *                   a
     */
    version_compare: function(a, b)
    {
        // Split up the versions
        var i = 0;
        var a_split = a.split('.');
        for(i = 0; i < a_split.length; i++)
        {
            a_split[i] = parseInt(a_split[i]);
        }

        var b_split = b.split('.');
        for(i = 0; i < b_split.length; i++)
        {
            b_split[i] = parseInt(b_split[i]);
        }

        var return_value = 0;
        for(i = 0; i < Math.max(a_split.length, b_split.length); i++)
        {
            if(i >= a_split.length)
            {
                return_value = 2;
                break;
            }
            else if(i >= b_split.length)
            {
                return_value = 1;
                break;
            }

            // Compare the versions at this index
            if(a_split[i] > b_split[i])
            {
                return_value = 1;
            }
            else if(b_split[i] > a_split[i])
            {
                return_value = 2;
            }

            if(return_value)
            {
                break;
            }
        }

        return return_value;
    },
    
    
    /**
     * Given an appliance record from SNOW determine if this deployment
     * applies to it. Return true/false
     * @param {object} appliance - The appliance to check for applicableness
     */
    does_appliance_apply: function(appliance)
    {
        var applies = false;
        var i = 0;

        if(this.category == 'Feed Handler')
        {
            // Only check this appliance if the firmware version of the
            // feedhandler is what is on the appliance
            if(!this.does_appliance_have_correct_firmware(appliance))
            {
                return false;
            }

            // Loop through the feed handler instances and see if the
            // appliance already has the feedhandler we are looking at.
            // If it does, AND the version it currently has is lower than
            // the release we should say that the appliance applies because
            // it would be an upgrade
            for(i = 0; i < this.feedhandler_instances.length; i++)
            {
                if(this.feedhandler_instances[i].appliance == appliance.name)
                {
                    // A feedhandler that is installed on this appliance
                    // See if it is the feedhandler we are upgrading/releasing
                    var name_split = this.feedhandler_instances[i].name.split(' ');
                    var fh_name = name_split[0];
                    var fh_version = name_split[1];
                    if(fh_name == this.name)
                    {
                        // Check to see if the version of the feedhandler
                        // already installed is less than the version being
                        // deployed
                        
                        var ver_comp_result = this.version_compare(this.version, fh_version);
                        if(ver_comp_result == 1)
                        {
                            // New release version is higher than installed
                            // version
                            applies = true;                         
                        }               
                    }                   
                }
            }
        }
        else if(this.category == 'Initialization Library')
        {
            // TODO (not in first phase scope)
        }
        // TODO: else if (not in first phase scope)


        return applies;
    },


    /**
     * Gets all appliances from Service (Exegy) Now and then determines if the
     * deployment applies to each appliance. Returns the array of applicable
     * appliances.
     */
    get_applicable_appliances: function()
    {
        var i = 0;

        this.applicable_appliances = [];

        // First, we need to limit the applicable appliances to the list of
        // target appliances

        if(this.target_appliances != null &&
           this.target_appliances != undefined &&
           String(this.target_appliances).trim() != '' &&
           this.target_appliances.length > 0)
        {
            for(i = 0; i < this.all_appliances.length; i++)
            {
                if(this.target_appliances.indexOf(this.all_appliances[i].name) !== -1)
                {
                    // This appliance is in the target appliance list
                    // Now, based on the type of deployment we are doing we may need to
                    // limit the applicable appliances array more, depending on more
                    // criteria
                    var add = true;

                    if(this.category == 'Feed Handler')
                    {
                        // For feed handler type deployments we need to make
                        // sure that the appliances we are targeting have the
                        // right firmware version
                        if(!this.does_appliance_have_correct_firmware(this.all_appliances[i]))
                        {
                            // This appliance does NOT have the proper
                            // firmware version
                            add = false;
                        }
                    }

                    if(add)
                    {
                        this.applicable_appliances.push(this.all_appliances[i]);
                    }
                }
            }
        }
    },


    /**
     * Given an array of changes sort the array by the number of possible
     * days for the change
     */
    sort_changes_by_possible_days: function(changes)
    {
        function compare(a,b)
        {
            if (a.possible_days.length < b.possible_days.length)
            {
                return -1;
            }
            if (a.possible_days.length > b.possible_days.length)
            {
                return 1;
            }
            return 0;
        }

        changes.sort(compare);
    },
    
    
    /**
     * Function to create a change instance for each applicable appliance,
     * and then schedule those change instances around each other and the
     * already existing changes. Posts the new and updated changes to Service
     * Now at the end.
     * @param {array} applicable_appliances - Array of appliances that the
     *                                        deployment applies to
     * @param {array} existing_change_instances - Array of changes that already
     *                                            exist and need to be
     *                                            scheduled around
     */
    create_and_schedule_changes: function(existing_change_instances)
    {
        var i = 0;
        var c_instance = null;

        if(!existing_change_instances)
        {
            existing_change_instances = [];
        }

        // Determine applicable appliances
        this.get_applicable_appliances();

        if(!this.applicable_appliances.length)
        {
            var msg = 'No applicable appliances found!';
            msg += " fwver="+this.firmware_version;
            msg += " name="+this.name;
            this.logger.log('INFO', msg);
            return;
        }
        else
        {
            this.logger.log('INFO', 'Found '+ this.applicable_appliances.length +' applicable appliances to this deployment.');
        }

        // Create a change instance for every applicable appliance
        var new_change_instances = [];

        for(i = 0; i < this.applicable_appliances.length; i++)
        {
            c_instance = new ACSChangeInstance();
            c_instance.appliance      = this.applicable_appliances[i];
            c_instance.new_change     = true;
            c_instance.changed        = true;
            c_instance.deployment     = this;
            c_instance.original_index = i;
            new_change_instances.push(c_instance);
        }

        // Create a scheduler object
        var scheduler = new ACSScheduler();

        // Use the scheduler object to schedule the changes!
        var scheduled_change_ids = scheduler.schedule_changes(new_change_instances, existing_change_instances, this.category);

        return scheduled_change_ids;
    }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>gpopp</sys_created_by>
        <sys_created_on>2016-08-17 14:44:59</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>c845c2694f91ea008ea450ee0310c740</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>ACSDeployment</sys_name>
        <sys_package display_value="ACS" source="x_exeg2_acs">58d89c1c13fca200e93cb16f3244b0d7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="ACS">58d89c1c13fca200e93cb16f3244b0d7</sys_scope>
        <sys_update_name>sys_script_include_c845c2694f91ea008ea450ee0310c740</sys_update_name>
        <sys_updated_by>mcarter</sys_updated_by>
        <sys_updated_on>2016-09-28 19:00:20</sys_updated_on>
    </sys_script_include>
</record_update>
