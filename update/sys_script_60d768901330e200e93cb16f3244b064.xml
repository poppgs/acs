<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_exeg2_acs_deployment</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Create Deployment instances</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/)
{
    // We used to create "Deployment Instances" in here, but now we handle
    // things with "Deployment Items" that are manually created, so now this
    // business rule doesn't do anything

    /*
    var helper = new ACSHighLevelHelper();

    var firmware_versions = null;
    if(current.category == 'Feed Handler')
    {
        gs.info("Gathering firmware versions for"+ current.name);
        // Gather firmware versions
        firmware_versions = helper.gather_fw_versions(current.name);
        gs.info('Firmware Versions:\n'+JSON.stringify(firmware_versions));
    }

    var logger = new ACSLogger();
    logger.set_source('CreateDeploymentInstances');

    // Create deployment instances
    helper.create_deployment_instances(firmware_versions, logger, current);

    // We used to start scheduling here, but we no longer do things that way.
    // Now the actual scheduling of this deployment is handled by a Scripted
    // Rest API (acs_schedule)
    */
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>gpopp</sys_created_by>
        <sys_created_on>2016-07-19 14:18:40</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>60d768901330e200e93cb16f3244b064</sys_id>
        <sys_mod_count>106</sys_mod_count>
        <sys_name>Create Deployment instances</sys_name>
        <sys_overrides/>
        <sys_package display_value="ACS" source="x_exeg2_acs">58d89c1c13fca200e93cb16f3244b0d7</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="ACS">58d89c1c13fca200e93cb16f3244b0d7</sys_scope>
        <sys_update_name>sys_script_60d768901330e200e93cb16f3244b064</sys_update_name>
        <sys_updated_by>mcarter</sys_updated_by>
        <sys_updated_on>2016-09-22 15:27:57</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
</record_update>
