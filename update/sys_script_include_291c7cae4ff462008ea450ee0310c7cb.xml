<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_exeg2_acs.ACSRelease</api_name>
        <client_callable>false</client_callable>
        <description>A class to hold all information and functions that have to do with an Exegy release in reference to Automatic Change Scheduling. Will handle creating CRs and making sure they are scheduled.</description>
        <name>ACSRelease</name>
        <script><![CDATA[var ACSRelease = Class.create();

ACSRelease.prototype = {
    /**
     * Constructor, sets up the member variables.
     */
    type: 'ACSRelease', // Constant
    initialize: function() {
        this.id                    = null;
        this.name                  = null;
        this.version               = null;
        this.firmware_version      = null;
        this.target_appliances     = null;
        this.deadline              = null;
        this.start_date            = null;
        this.release_type          = null;
        this.artifact_type         = null;
        this.hot_cut               = false;
        this.unique_key            = null;
        this.all_appliances        = null;
        this.applicable_appliances = null;
        this.software_category     = null;
        this.feedhandler_instances = [];
        this.init_lib_instances    = [];

        this.scheduling_config     = null;

        this.debug = '';

        this.logger = new ACSLogger();
        this.logger.set_source('ACSRelease');

        this.software_category_to_template_id = {
            'Feed Handler': '4cca50014f91aa008ea450ee0310c71c'
        }
    },


    /**
     * Given an appliance record from SNOW determine if the appliance has the
     * version of firmware installed on it that is targeted by this release
     * @param {object} appliance - The appliance for which to check the
     *                             firmware version
     */
    does_appliance_have_correct_firmware: function(appliance)
    {
        var correct = false;
        var f_version_major_minor = appliance.firmware_version.split('.');
        if(f_version_major_minor.length == 3)
        {
            f_version_major_minor = f_version_major_minor[0] +'.'+ f_version_major_minor[1];

            if(this.firmware_version == f_version_major_minor)
            {
                correct = true;
            }
        }

        return correct;
    },


    /**
     * Takes in two versions and returns a value to denote whether one is
     * higher than the other.
     * @param {string} a - A version number
     * @param {string} b - Another version number
     * @return {integer} 0 if the versions are equal, 1 if version a is higher
     *                   than version b, 2 if version b is higher than version
     *                   a
     */
    version_compare: function(a, b)
    {
        // Split up the versions
        var i = 0;
        var a_split = a.split('.');
        for(i = 0; i < a_split.length; i++)
        {
            a_split[i] = parseInt(a_split[i]);
        }

        var b_split = b.split('.');
        for(i = 0; i < b_split.length; i++)
        {
            b_split[i] = parseInt(b_split[i]);
        }

        var return_value = 0;
        for(i = 0; i < Math.max(a_split.length, b_split.length); i++)
        {
            if(i >= a_split.length)
            {
                return_value = 2;
                break;
            }
            else if(i >= b_split.length)
            {
                return_value = 1;
                break;
            }

            // Compare the versions at this index
            if(a_split[i] > b_split[i])
            {
                return_value = 1;
            }
            else if(b_split[i] > a_split[i])
            {
                return_value = 2;
            }

            if(return_value)
            {
                break;
            }
        }

        return return_value;
    },
    
    
    /**
     * Given an appliance record from SNOW determine if this release
     * applies to it. Return true/false
     * @param {object} appliance - The appliance to check for applicableness
     */
    does_appliance_apply: function(appliance)
    {
        var applies = false;
        var i = 0;

        if(this.software_category == 'Feed Handler')
        {
            // Only check this appliance if the firmware version of the
            // feedhandler is what is on the appliance
            if(!this.does_appliance_have_correct_firmware(appliance))
            {
                return false;
            }

            // Loop through the feed handler instances and see if the
            // appliance already has the feedhandler we are looking at.
            // If it does, AND the version it currently has is lower than
            // the release we should say that the appliance applies because
            // it would be an upgrade
            for(i = 0; i < this.feedhandler_instances.length; i++)
            {
                var msg = "";
                if(this.feedhandler_instances[i].appliance == appliance.name)
                {
                    msg = "Found app "+appliance.name;
                    // A feedhandler that is installed on this appliance
                    // See if it is the feedhandler we are upgrading/releasing
                    var name_split = this.feedhandler_instances[i].name.split(' ');
                    var fh_name = name_split[0];
                    var fh_version = name_split[1];
                    if(fh_name == this.name)
                    {
                        // Check to see if the version of the feedhandler
                        // already installed is less than the version being
                        // released
                        
                        var ver_comp_result = this.version_compare(this.version, fh_version);
                        if(ver_comp_result == 1)
                        {
                            // New release version is higher than installed
                            // version
                            applies = true;                         
                        }               
                    }                   
                }
            }
        }
        else if(this.software_category == 'Initialization Library')
        {
            // TODO (not in first phase scope)
        }
        // TODO: else if (not in first phase scope)


        return applies;
    },


    /**
     * Gets all appliances from Service (Exegy) Now and then determines if
     * the release applies to each appliance. Returns the array of applicable
     * appliances.
     */
    get_applicable_appliances: function()
    {
        var i = 0;

        this.applicable_appliances = [];

        if(this.target_appliances != null &&
           this.target_appliances != undefined &&
           String(this.target_appliances).trim() != '' &&
           this.target_appliances.length > 0)
        {
            // Just use the target appliances provided by the release
            for(i = 0; i < this.all_appliances.length; i++)
            {
                // TODO: Probably still need to check firmware version
                if(this.target_appliances.indexOf(this.all_appliances[i].name) !== -1)
                {
                    this.applicable_appliances.push(this.all_appliances[i]);
                }
            }
        }
        else
        {
            // Calculate what appliances the release applies to
            for(i = 0; i < this.all_appliances.length; i++)
            {
                if(this.does_appliance_apply(this.all_appliances[i]))
                {
                    this.applicable_appliances.push(this.all_appliances[i]);
                }
            }
        }
    },


    /**
     * Given an array of changes sort the array by the number of possible
     * days for the change
     */
    sort_changes_by_possible_days: function(changes)
    {
        function compare(a,b)
        {
            if (a.possible_days.length < b.possible_days.length)
            {
                return -1;
            }
            if (a.possible_days.length > b.possible_days.length)
            {
                return 1;
            }
            return 0;
        }

        changes.sort(compare);
    },
    
    
    /**
     * Function to create a change instance for each applicable appliance,
     * and then schedule those change instances around each other and the
     * already existing changes. Posts the new and updated changes to Service
     * Now at the end.
     * @param {array} applicable_appliances - Array of appliances that the
     *                                        release applies to
     * @param {array} existing_change_instances - Array of changes that already
     *                                            exist and need to be
     *                                            scheduled around
     */
    create_and_schedule_changes: function(existing_change_instances)
    {
        var i = 0;
        var c_instance = null;

        if(!existing_change_instances)
        {
            existing_change_instances = [];
        }

        // Determine applicable appliances
        this.get_applicable_appliances();

        if(!this.applicable_appliances.length)
        {
            var msg = 'No applicable appliances found!';
            msg += " fwver="+this.firmware_version;
            msg += " name="+this.name;
            this.logger.log('INFO', msg);
            return;
        }
        else
        {
            this.logger.log('INFO', 'Found '+ this.applicable_appliances.length +' applicable appliances to this release.');
        }

        // Create a change instance for every applicable appliance
        var new_change_instances = [];

        for(i = 0; i < this.applicable_appliances.length; i++)
        {
            c_instance = new ACSChangeInstance();
            c_instance.appliance      = this.applicable_appliances[i];
            c_instance.new_change     = true;
            c_instance.changed        = true;
            c_instance.release        = this;
            c_instance.original_index = i;
            new_change_instances.push(c_instance);
        }

        // Create an ACSRules object that will represent all the scheduling
        // rules used to calculate possible days for a change.
        var rules = new ACSRules();

        var msg = '\nThere are '+ existing_change_instances.length +' change instances for existing ACS changes (outside this release).';
        msg += '\nCreated '+ new_change_instances.length +' new change instances.';
        msg += '\nRelease start date is: '+this.start_date+'\n Deadline is: '+this.deadline;
        this.logger.log('INFO', msg);

        // For each of the new change instances determine what possbile times
        // they can be scheduled for execution
        for(i = 0; i < new_change_instances.length; i++)
        {
            new_change_instances[i].find_possible_days(new_change_instances, existing_change_instances, rules);
        }
        
        // Sort the change instances based on how many possible days they have
        // available (changes with only 1 possible day will be at the front [0]
        // of the list)
        var sorted_change_instances = new_change_instances.concat(); // Shallow array copy
        this.sort_changes_by_possible_days(sorted_change_instances);

        // Start scheduling changes
        while(sorted_change_instances.length > 0)
        {
            // Keep track of the index of the change instance we are currently
            // scheduling. We default to the first change instance in the
            // sorted array, which should be the change instance with the
            // least amount of possible days.
            var current_index = 0;

            // Check this change instance's appliance to see if it has any
            // systems that must have this change executed before it, that
            // have not yet been scheduled.
            // If that is the case change our current_index to point at that
            // appliance's change instance so we can be sure it is scheduled
            // first.
            // We may have to do this multiple times, for multiple
            // dependencies
            var check = true;
            while(check)
            {
                // We might be done checking, but we are NOT done checking
                // if any appliance in the current's dependency list has
                // not yet been scheduled
                var changed_index = false;
                for(i = 0; i < sorted_change_instances[current_index].appliance.change_dependencies.length; i++)
                {
                    var cd = sorted_change_instances[current_index].appliance.change_dependencies[i];

                    // See if we can find the dependency appliance in any
                    // other not-yet-scheduled change
                    for(var j = 0; j < sorted_change_instances.length; j++)
                    {
                        if(sorted_change_instances[j].appliance.name == cd.name)
                        {
                            // We need to schedule the change instance at index j first
                            changed_index = true;
                            current_index = j;
                            break;
                        }
                    }

                    if(changed_index)
                    {
                        break;
                    }
                }

                // If we changed the index that means we found another
                // change instance that needs to be scheduled prior to
                // the one we were looking at. Now we need to check THAT
                // change instance's appliance dependencies to make sure
                // we don't need to do this whole process again.
                check = changed_index;
            }

            // Refernce the change instance we are going to schedule
            current = sorted_change_instances[current_index];

            // Pick a day to schedule the current change from the changes
            //  possible days list. This will also affect the copy of the
            //  change instance in the new_change_instances list, because the
            //  sorted change instances are just references to that list in a
            //  different order. This means this will be updated "everywhere"
            // Pick the earliest day possible
            if(current.possible_days.length > 0)
            {
                current.selected_day = current.possible_days[0];
            }
            else
            {
                // This is an error condition, we could not schedule
                // the change
                var msg = "Release.create_and_schedule_changes: Could not schedule a change! ";
                msg += " fwver="+this.firmware_version;
                msg += " name="+this.name;              
                this.logger.log('ERROR', msg);
                // TODO: Do more stuff here, like alert and file incidents
                //       or something
            }

            // Remove the change we just scheduled from the sorted list
            // because we don't need to pick a date for it anymore
            sorted_change_instances.splice(current_index, 1);

            // We have now (probably) scheduled the change. We need to
            //  re-compute the possible days for the remaining changes, and
            //  then re-sort
            if(sorted_change_instances.length > 0)
            {
                for(i = 0; i < sorted_change_instances.length; i++)
                {
                    sorted_change_instances[i].find_possible_days(new_change_instances, existing_change_instances, rules);
                }

                this.sort_changes_by_possible_days(sorted_change_instances);
            }
        }

        // Create a templater object that will help fill in the contents of
        // our changes
        var templater = new ACSTemplater();
        var template_id = this.software_category_to_template_id[this.software_category];

        // Add the new change instances to SNOW
        // TODO also add possiblity to reschedule existing changes?
        for(i = 0; i < new_change_instances.length; i++)
        {
            //gs.info(i+": Schedule on this day: "+new_change_instances[i].selected_day);
            new_change_instances[i].add_to_snow(templater, template_id);
        }

        //gs.info(msg);
    }   
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>mcarter</sys_created_by>
        <sys_created_on>2016-07-26 15:26:15</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>291c7cae4ff462008ea450ee0310c7cb</sys_id>
        <sys_mod_count>103</sys_mod_count>
        <sys_name>ACSRelease</sys_name>
        <sys_package display_value="ACS" source="x_exeg2_acs">58d89c1c13fca200e93cb16f3244b0d7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="ACS">58d89c1c13fca200e93cb16f3244b0d7</sys_scope>
        <sys_update_name>sys_script_include_291c7cae4ff462008ea450ee0310c7cb</sys_update_name>
        <sys_updated_by>mcarter</sys_updated_by>
        <sys_updated_on>2016-08-16 16:08:30</sys_updated_on>
    </sys_script_include>
</record_update>
